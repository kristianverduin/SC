Deploying postgres database

kubectl apply -f postgres-config.yaml
kubectl apply -f postgres-secret.yaml
kubectl apply -f postgres-storage.yaml
kubectl apply -f postgres-deployment.yaml
kubectl apply -f postgres-service.yaml

Check database connection using (password is docker)

psql -h localhost -U docker --password -p 30015 docker

Deploying the API

To add RBAC

kubectl apply -f pod-reader.yaml
kubectl apply -f pod-reader-binding.yaml

Cant check with REST API as database is not working

kubectl apply -f secret-reader.yaml
kubectl apply -f read-secrets-global.yaml

ADD TSL Section

sudo docker build -t localhost:32000/api .
sudo docker push localhost:32000/api

kubectl apply -f api-deployment.yaml
kubectl apply -f api-service.yaml

kubectl apply -f loadbalancer.yaml

Get clusterIP for the api (using kubectl get svc) and check that it is working with

curl -k $CLUSTER_IP:5000

Running api with a Helm chart

microk8s helm3 install ./helm-charts/rest-api-chart --generate-name

Execute the recommended commands to get the nodePort and nodeIP

Connect to the api using

curl -k http://$NODE_IP:$NODE_PORT

Scaling (with n replicas)

kubectl scale deployment api-deployment --replicas=n

Scaling (automically)

kubectl autoscale deployment api-deployment --min=n --max=x --cpu-percent=z
where n is the minimum number of replicas, x is the maximum number of replicas and z is the cpu percentage it should use

To restart the application

kubectl rollout restart deployment/api-deployment

To uninstall the helm chart

helm uninstall [release-name]

To uninstall the application

kubectl delete deployment api-deployment
kubectl delete deployment postgres-deployment
kubectl delete service api-service
kubectl delete service postgres-service 

